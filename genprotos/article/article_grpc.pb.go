// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: blockpost-protos/article/article.proto

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleServicesClient is the client API for ArticleServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServicesClient interface {
	AddArticle(ctx context.Context, in *AddArticleReq, opts ...grpc.CallOption) (*AddArticleRes, error)
	GetArticleByID(ctx context.Context, in *GetArticleByIdReq, opts ...grpc.CallOption) (*GetArticleByIdRes, error)
	GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListRes, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleRes, error)
	DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleRes, error)
}

type articleServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServicesClient(cc grpc.ClientConnInterface) ArticleServicesClient {
	return &articleServicesClient{cc}
}

func (c *articleServicesClient) AddArticle(ctx context.Context, in *AddArticleReq, opts ...grpc.CallOption) (*AddArticleRes, error) {
	out := new(AddArticleRes)
	err := c.cc.Invoke(ctx, "/ArticleServices/AddArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServicesClient) GetArticleByID(ctx context.Context, in *GetArticleByIdReq, opts ...grpc.CallOption) (*GetArticleByIdRes, error) {
	out := new(GetArticleByIdRes)
	err := c.cc.Invoke(ctx, "/ArticleServices/GetArticleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServicesClient) GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListRes, error) {
	out := new(GetArticleListRes)
	err := c.cc.Invoke(ctx, "/ArticleServices/GetArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServicesClient) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleRes, error) {
	out := new(UpdateArticleRes)
	err := c.cc.Invoke(ctx, "/ArticleServices/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServicesClient) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleRes, error) {
	out := new(DeleteArticleRes)
	err := c.cc.Invoke(ctx, "/ArticleServices/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServicesServer is the server API for ArticleServices service.
// All implementations must embed UnimplementedArticleServicesServer
// for forward compatibility
type ArticleServicesServer interface {
	AddArticle(context.Context, *AddArticleReq) (*AddArticleRes, error)
	GetArticleByID(context.Context, *GetArticleByIdReq) (*GetArticleByIdRes, error)
	GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListRes, error)
	UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleRes, error)
	DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleRes, error)
	mustEmbedUnimplementedArticleServicesServer()
}

// UnimplementedArticleServicesServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServicesServer struct {
}

func (UnimplementedArticleServicesServer) AddArticle(context.Context, *AddArticleReq) (*AddArticleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticle not implemented")
}
func (UnimplementedArticleServicesServer) GetArticleByID(context.Context, *GetArticleByIdReq) (*GetArticleByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleByID not implemented")
}
func (UnimplementedArticleServicesServer) GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleList not implemented")
}
func (UnimplementedArticleServicesServer) UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleServicesServer) DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleServicesServer) mustEmbedUnimplementedArticleServicesServer() {}

// UnsafeArticleServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServicesServer will
// result in compilation errors.
type UnsafeArticleServicesServer interface {
	mustEmbedUnimplementedArticleServicesServer()
}

func RegisterArticleServicesServer(s grpc.ServiceRegistrar, srv ArticleServicesServer) {
	s.RegisterService(&ArticleServices_ServiceDesc, srv)
}

func _ArticleServices_AddArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServicesServer).AddArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ArticleServices/AddArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServicesServer).AddArticle(ctx, req.(*AddArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleServices_GetArticleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServicesServer).GetArticleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ArticleServices/GetArticleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServicesServer).GetArticleByID(ctx, req.(*GetArticleByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleServices_GetArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServicesServer).GetArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ArticleServices/GetArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServicesServer).GetArticleList(ctx, req.(*GetArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleServices_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServicesServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ArticleServices/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServicesServer).UpdateArticle(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleServices_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServicesServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ArticleServices/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServicesServer).DeleteArticle(ctx, req.(*DeleteArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleServices_ServiceDesc is the grpc.ServiceDesc for ArticleServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ArticleServices",
	HandlerType: (*ArticleServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddArticle",
			Handler:    _ArticleServices_AddArticle_Handler,
		},
		{
			MethodName: "GetArticleByID",
			Handler:    _ArticleServices_GetArticleByID_Handler,
		},
		{
			MethodName: "GetArticleList",
			Handler:    _ArticleServices_GetArticleList_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleServices_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleServices_DeleteArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockpost-protos/article/article.proto",
}
