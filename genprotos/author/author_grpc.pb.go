// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: blockpost-protos/author/author.proto

package author

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorServicesClient is the client API for AuthorServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorServicesClient interface {
	AddAuthor(ctx context.Context, in *CreateAuthorReq, opts ...grpc.CallOption) (*CreateAuthorRes, error)
	GetAuthorByID(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GetAuthorByIdRes, error)
	GetArticlesByAuthorID(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GetArticles, error)
	GetAuthorList(ctx context.Context, in *GetAuthorListReq, opts ...grpc.CallOption) (*GetAuthors, error)
	UpdateAuthor(ctx context.Context, in *UpdateAuthorReq, opts ...grpc.CallOption) (*CreateAuthorRes, error)
	DeleteAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CreateAuthorRes, error)
}

type authorServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorServicesClient(cc grpc.ClientConnInterface) AuthorServicesClient {
	return &authorServicesClient{cc}
}

func (c *authorServicesClient) AddAuthor(ctx context.Context, in *CreateAuthorReq, opts ...grpc.CallOption) (*CreateAuthorRes, error) {
	out := new(CreateAuthorRes)
	err := c.cc.Invoke(ctx, "/AuthorServices/AddAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServicesClient) GetAuthorByID(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GetAuthorByIdRes, error) {
	out := new(GetAuthorByIdRes)
	err := c.cc.Invoke(ctx, "/AuthorServices/GetAuthorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServicesClient) GetArticlesByAuthorID(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GetArticles, error) {
	out := new(GetArticles)
	err := c.cc.Invoke(ctx, "/AuthorServices/GetArticlesByAuthorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServicesClient) GetAuthorList(ctx context.Context, in *GetAuthorListReq, opts ...grpc.CallOption) (*GetAuthors, error) {
	out := new(GetAuthors)
	err := c.cc.Invoke(ctx, "/AuthorServices/GetAuthorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServicesClient) UpdateAuthor(ctx context.Context, in *UpdateAuthorReq, opts ...grpc.CallOption) (*CreateAuthorRes, error) {
	out := new(CreateAuthorRes)
	err := c.cc.Invoke(ctx, "/AuthorServices/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServicesClient) DeleteAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CreateAuthorRes, error) {
	out := new(CreateAuthorRes)
	err := c.cc.Invoke(ctx, "/AuthorServices/DeleteAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorServicesServer is the server API for AuthorServices service.
// All implementations must embed UnimplementedAuthorServicesServer
// for forward compatibility
type AuthorServicesServer interface {
	AddAuthor(context.Context, *CreateAuthorReq) (*CreateAuthorRes, error)
	GetAuthorByID(context.Context, *Id) (*GetAuthorByIdRes, error)
	GetArticlesByAuthorID(context.Context, *Id) (*GetArticles, error)
	GetAuthorList(context.Context, *GetAuthorListReq) (*GetAuthors, error)
	UpdateAuthor(context.Context, *UpdateAuthorReq) (*CreateAuthorRes, error)
	DeleteAuthor(context.Context, *Id) (*CreateAuthorRes, error)
	mustEmbedUnimplementedAuthorServicesServer()
}

// UnimplementedAuthorServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorServicesServer struct {
}

func (UnimplementedAuthorServicesServer) AddAuthor(context.Context, *CreateAuthorReq) (*CreateAuthorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthor not implemented")
}
func (UnimplementedAuthorServicesServer) GetAuthorByID(context.Context, *Id) (*GetAuthorByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorByID not implemented")
}
func (UnimplementedAuthorServicesServer) GetArticlesByAuthorID(context.Context, *Id) (*GetArticles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticlesByAuthorID not implemented")
}
func (UnimplementedAuthorServicesServer) GetAuthorList(context.Context, *GetAuthorListReq) (*GetAuthors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorList not implemented")
}
func (UnimplementedAuthorServicesServer) UpdateAuthor(context.Context, *UpdateAuthorReq) (*CreateAuthorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedAuthorServicesServer) DeleteAuthor(context.Context, *Id) (*CreateAuthorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedAuthorServicesServer) mustEmbedUnimplementedAuthorServicesServer() {}

// UnsafeAuthorServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorServicesServer will
// result in compilation errors.
type UnsafeAuthorServicesServer interface {
	mustEmbedUnimplementedAuthorServicesServer()
}

func RegisterAuthorServicesServer(s grpc.ServiceRegistrar, srv AuthorServicesServer) {
	s.RegisterService(&AuthorServices_ServiceDesc, srv)
}

func _AuthorServices_AddAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServicesServer).AddAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorServices/AddAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServicesServer).AddAuthor(ctx, req.(*CreateAuthorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorServices_GetAuthorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServicesServer).GetAuthorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorServices/GetAuthorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServicesServer).GetAuthorByID(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorServices_GetArticlesByAuthorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServicesServer).GetArticlesByAuthorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorServices/GetArticlesByAuthorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServicesServer).GetArticlesByAuthorID(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorServices_GetAuthorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServicesServer).GetAuthorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorServices/GetAuthorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServicesServer).GetAuthorList(ctx, req.(*GetAuthorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorServices_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServicesServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorServices/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServicesServer).UpdateAuthor(ctx, req.(*UpdateAuthorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorServices_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServicesServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorServices/DeleteAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServicesServer).DeleteAuthor(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorServices_ServiceDesc is the grpc.ServiceDesc for AuthorServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthorServices",
	HandlerType: (*AuthorServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAuthor",
			Handler:    _AuthorServices_AddAuthor_Handler,
		},
		{
			MethodName: "GetAuthorByID",
			Handler:    _AuthorServices_GetAuthorByID_Handler,
		},
		{
			MethodName: "GetArticlesByAuthorID",
			Handler:    _AuthorServices_GetArticlesByAuthorID_Handler,
		},
		{
			MethodName: "GetAuthorList",
			Handler:    _AuthorServices_GetAuthorList_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _AuthorServices_UpdateAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _AuthorServices_DeleteAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockpost-protos/author/author.proto",
}
